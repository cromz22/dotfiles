" general
syntax enable
set number
set virtualedit=onemore
set showmatch  " show corespondent parenthesis
set autoindent  " Enter pressed, indent same space as the previous row
set tabstop=4  " how many spaces are counted as a tab
set shiftwidth=4  " how many spaces are inserted when indenting
set incsearch  " begin searching as soon as a character is input
set hlsearch
set mouse=a
set nowrap
set backspace=indent,eol,start
set shortmess-=S  " show matched number when searching

" encoding
set encoding=utf-8
set fileencodings=utf-8,cp932,euc-jp,iso-2022-jp
set fileformats=unix,dos,mac
set fileencoding=utf-8
set fileformat=unix

" colors
colorscheme desert

" key mapping
let g:mapleader = "\<Space>"

"  normal mode
nnoremap <Leader>w :w<CR>
nnoremap <silent> <Leader>q :q<CR>
"nnoremap j gj
"nnoremap k gk
nnoremap <silent> <C-e> :nohlsearch<CR><C-l><Esc>
nnoremap <Leader>o o<Esc>
nnoremap <S-h> ^
nnoremap <S-l> $
nnoremap s <Nop>
nnoremap ss :split<CR>
nnoremap sv :vsplit<CR>
nnoremap sh <C-w>h
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l

"  insert mode
function ClosePair(char)
	if getline('.')[col('.') - 1] == a:char
		return "\<Right>"
	else
		return a:char
	endif
endf

inoremap <C-e> <Esc>
inoremap ( ()<Left>
inoremap <expr> ) ClosePair(')')
inoremap { {}<Left>
inoremap <expr> } ClosePair('}')
inoremap [ []<Left>
inoremap <expr> ] ClosePair(']')
inoremap {<Enter> {}<Left><CR><ESC><S-o>

"  visual mode
vnoremap <C-e> <Esc>
vnoremap y y`]
vnoremap p p`]
